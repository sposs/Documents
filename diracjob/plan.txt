Definitons:

Job : successions of steps, job has one Inputdata/inputsandbox and one Outputdata/outputsandbox. Each one can be a list 
of items 

2 types of jobs: user and production
user job: no control on inputdata and input sandbox. Just return error if files are not found
no control on steps applied: up to the user
Pack large sandbox as LFN automatically, make sure subsequent dirac instance call share the same path. What happens if 
SB changes during submission?
control application existence
allow output file name setting
control site
control system config
control CPU needed
allow sb files as lfn or local files
steeringfiles are obtained from job def and added to inputSB

production jobs: input data is to be controlled as FC query, steering files are only application parameters
output data must be specified properly using well defined conventions
steps must be very well predefined: order is important e.g. register data cannot be done before end of job
control applications
control every step of the definition

Model:
          Class job 
class userJob  Class productionjob

                    Class Application 
cls Whizard   class mokka    class slic    class Marlin   class lcsim   class slicpandora   class ...


=======================================================================
class job(Job):
setCPUtime
setsystemconfig
setname
setjobgroup
setdestination
setbannedsites
append(application): Define workflow parameters (get them from application) and set values, 
create workflow instances, etc
get app.inputSB and add to global inputsb (self.inputSandbox)
Calls application.checkConsistency
Calls __addParameter
Sets default logfile if not set already
setignoreapplicationerrors
self.applicationlist = [] (filled by append call)

AskUser() called from Dirac.submit, asks only if job.check is True (set by default overwritten by job.ignoreChecks)


========================
class userjob(job):
setinputdata
setinputsandbox (global inputSB)
setoutputdata
setoutputsandbox

========================
class productionjob(job):
setinputdataquery -> get energy, evttype, etc.
get from application the elements to build path (self.prodparameters)
setproddetail
createProd
finalizeProd

===================================================================
class application:
self.appname=None
self.version=None
self.prodparameters = {}
self.parameters (dict[name]['type']=type, [name]['description']=description, [name]['default']=default, 'value')
self.detectortype= None
self.datatype = None
self.nbevts = 0
self.energy = ''
self.logfile = ''
self.steeringfile = ''
self.OutputFile = ''
self.modulename = "ApplicationScript"
self.inputSB = []
setName() (self.name)
setVersion() (self.version)
setSteeringFile(file) (default none) (self.steeringfile, self.inputSB.append(file))
setLogFile() (self.logfile): default is self.appname_self.appversion_stepid.log, created when appending to job
setNbEvts() (self.nbevts)
setEnergy() (self.energy)

setoutputfile(file) (default none) (self.OutputFile):
if self.detectortype:
  self.prodparameters[file]["detectortype"]=self.detectortype
if self.datatype:
  self.prodparameters[file]["Datatype"]=self.datatype

getParameters() needed by Job to contruct workflow

getInputfromApp(Application): to allow linking of apps. This is first use to copy things: store app pointer and check param
when Job builds workflow, remember to look for linked apps: application expect omething from a prexisting app: outputfile
in detail: this checks for app type and rejects wrong types, check expected value defined: example marlin expects
mokka, with outputfile defined, GearFile can be hardcoded. 

checkConsistency(): overloaded by every subclass to check validity (app version exists, links between apps !!!), 
check datatype

======
class GenericApp(Application)
dict of apps
setScript(): Generic application definition: to be used with ApplicationScript module

=======
class GetSRMFile(applcation):
""" Dummy class that just calls getStorageFile from job, bypassing the LFN resolution"""
self.appname = "getsrmfile"
self.version = "default" (no need in fact)
setFileDict(): self.filedict is a list of dictionnaries {file:site}
self.modulename = "GetSRMFile"
No Software package needed

=======
class whizard(application):
setProcess: check process and find corresponding version: see below
setLumi (optional)
setRandomSeed (optional)
setParametersDict: takes a dict of steering parameters
setModel() default 'sm' list to obtain from ILCDIRAC.Core.Utilities.GeneratorModels getModels
self.appname="whizard"
self.modulename= "WhizardAnalysis"
self.datatype = 'gen'
For process list: plan on the interface to ProcessProductionSystem. Until then 
Use existing interface: job gets process list, and when Whizard is passed, check process
in checkConsistency()

=======
Class pythia(application):
self.appname = "pythia"
self.modulename= "PythiaAnalysis"
self.datatype = 'gen'
All other parameters are part of base application
Version must be not None (checkConsistency)

=======
class postGenCuts(application):
""" Potentially not needed anymore """
self.appname = "PostGenSel"
self.modulename = "PostGenSelection"
Version must be not None (checkConsistency)
no outputData

=======
class stdhepcut(application):
setCutFile(file) : file to be added to input SB (self.inputSB.append(file))
setMaxNbEvts() : max number of events to keep in each file
self.appname="stdhepcut"
self.modulename = "StdhepCut"
setnbevtsperfile()
self.datatype = 'gen'
Version must be not None (checkConsistency)

=======
class overlayinput(application):
self.appname = 'overlay'
self.version='default' (no need in fact)
setDetectorModel() ("ILD" or "SID")
setBX() (int)
setGGhadInts() (float)
setProdID() (optional, int)
No outputfile

=======
class mokka(application):
self.detectortype='ILD'
self.appname="mokka"
self.modulename = "MokkaAnalysis"
self.datatype = 'SIM'
setDetectorModel(Detector model) (optional)
setDBSlice(sql file) (optional, self.inputSB)
setRandomSeed( int ): optional, default is the job number (so None here)
setMacFile( file ) : optional file (self.inputSB)
SkipNevents(int): optional
setProcessID(string): optional, added to every event in output slcio

=======
class marlin(application):
self.appname="marlin"
self.modulename = "MarlinAnalysis"
setXMLFile(file): (self.inputSB)
setGearFile (optionnal), but checkConsistency checks that Mokka is used as input, self.inputSB
self.datatype=None
setOutputDST(file) : 
self.prodparameters[file]['Datatype']="DST"
self.prodparameters[file]["detectortype"]='ILD'
setOutputREC(file) : 
self.prodparameters[file]['Datatype']="REC"
self.prodparameters[file]["detectortype"]='ILD'

=======
class slic(application):
self.detectortype= 'SID'
self.datatype = 'SIM'
self.appname='slic'
self.modulename = "SLICAnalysis"
setDetectorModel(zip name) (self.inputSB)

=======
class lcsim(application):
self.detectortype='SID'
self.datatype = None
self.appname='lcsim'
self.modulename = "LCSIMAnalysis"
setdetectormodel (optionnal), but checkConsistency checks that slic ran before
setOutputDST(file) : 
self.prodparameters[file]['Datatype']="DST"
self.prodparameters[file]["detectortype"]='SID'
setOutputREC(file) : 
self.prodparameters[file]['Datatype']="REC"
self.prodparameters[file]["detectortype"]='SID'

=======
class slicpandora(application):
self.detectortype='SID'
self.datatype='SIM'
self.appname='slicpandora'
self.modulename = "SlicPandoraAnalysis"
setpandorasettings (optionnal) (self.inputSB)

=======
class rootExec(application):
self.modulename = "RootExecutable" (or whatever)
self.appname='root'
setExec (self.inputSB)
setArgs

=======
class rootScript(application):
self.appname='root'
self.modulename = "RootScript" (or whatever)
setScript (self.inputSB)
setArgs

